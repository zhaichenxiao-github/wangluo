package com.example.wangluo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.wangluo.bean.GreenDaoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GREEN_DAO_BEAN".
*/
public class GreenDaoBeanDao extends AbstractDao<GreenDaoBean, Void> {

    public static final String TABLENAME = "GREEN_DAO_BEAN";

    /**
     * Properties of entity GreenDaoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GoodsDefaultIcon = new Property(0, String.class, "goodsDefaultIcon", false, "GOODS_DEFAULT_ICON");
        public final static Property GoodsDesc = new Property(1, String.class, "goodsDesc", false, "GOODS_DESC");
        public final static Property GoodsDefaultSku = new Property(2, String.class, "goodsDefaultSku", false, "GOODS_DEFAULT_SKU");
        public final static Property GoodsDefaultPrice = new Property(3, String.class, "goodsDefaultPrice", false, "GOODS_DEFAULT_PRICE");
        public final static Property GoodsCount = new Property(4, Long.class, "goodsCount", false, "GOODS_COUNT");
    }


    public GreenDaoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GreenDaoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GREEN_DAO_BEAN\" (" + //
                "\"GOODS_DEFAULT_ICON\" TEXT," + // 0: goodsDefaultIcon
                "\"GOODS_DESC\" TEXT," + // 1: goodsDesc
                "\"GOODS_DEFAULT_SKU\" TEXT," + // 2: goodsDefaultSku
                "\"GOODS_DEFAULT_PRICE\" TEXT," + // 3: goodsDefaultPrice
                "\"GOODS_COUNT\" INTEGER);"); // 4: goodsCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GREEN_DAO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GreenDaoBean entity) {
        stmt.clearBindings();
 
        String goodsDefaultIcon = entity.getGoodsDefaultIcon();
        if (goodsDefaultIcon != null) {
            stmt.bindString(1, goodsDefaultIcon);
        }
 
        String goodsDesc = entity.getGoodsDesc();
        if (goodsDesc != null) {
            stmt.bindString(2, goodsDesc);
        }
 
        String goodsDefaultSku = entity.getGoodsDefaultSku();
        if (goodsDefaultSku != null) {
            stmt.bindString(3, goodsDefaultSku);
        }
 
        String goodsDefaultPrice = entity.getGoodsDefaultPrice();
        if (goodsDefaultPrice != null) {
            stmt.bindString(4, goodsDefaultPrice);
        }
 
        Long goodsCount = entity.getGoodsCount();
        if (goodsCount != null) {
            stmt.bindLong(5, goodsCount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GreenDaoBean entity) {
        stmt.clearBindings();
 
        String goodsDefaultIcon = entity.getGoodsDefaultIcon();
        if (goodsDefaultIcon != null) {
            stmt.bindString(1, goodsDefaultIcon);
        }
 
        String goodsDesc = entity.getGoodsDesc();
        if (goodsDesc != null) {
            stmt.bindString(2, goodsDesc);
        }
 
        String goodsDefaultSku = entity.getGoodsDefaultSku();
        if (goodsDefaultSku != null) {
            stmt.bindString(3, goodsDefaultSku);
        }
 
        String goodsDefaultPrice = entity.getGoodsDefaultPrice();
        if (goodsDefaultPrice != null) {
            stmt.bindString(4, goodsDefaultPrice);
        }
 
        Long goodsCount = entity.getGoodsCount();
        if (goodsCount != null) {
            stmt.bindLong(5, goodsCount);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public GreenDaoBean readEntity(Cursor cursor, int offset) {
        GreenDaoBean entity = new GreenDaoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // goodsDefaultIcon
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // goodsDesc
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // goodsDefaultSku
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // goodsDefaultPrice
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // goodsCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GreenDaoBean entity, int offset) {
        entity.setGoodsDefaultIcon(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGoodsDesc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGoodsDefaultSku(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGoodsDefaultPrice(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGoodsCount(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(GreenDaoBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(GreenDaoBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(GreenDaoBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
